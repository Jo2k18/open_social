<?php

/**
 * @file
 * Install, update and uninstall functions for the social_language module.
 */

use Drupal\Core\Serialization\Yaml;
use Drupal\field\Entity\FieldConfig;
use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 *
 * Perform actions related to the installation of social_language.
 */
function social_language_install() {

  // Set some default permissions.
  _social_language_set_permissions();
  _social_language_set_image_configuration_third_party_settings();

  \Drupal::configFactory()->getEditable('locale.settings')
    ->set('translation.path', '/tmp')
    ->save();
}

/**
 * Function to set permissions.
 */
function _social_language_set_permissions() {
  $roles = Role::loadMultiple();

  /** @var \Drupal\user\Entity\Role $role */
  foreach ($roles as $role) {
    if ($role->id() === 'administrator') {
      continue;
    }

    $permissions = _social_language_get_permissions($role->id());
    user_role_grant_permissions($role->id(), $permissions);
  }
}

/**
 * Build the permissions.
 */
function _social_language_get_permissions($role) {
  $translation_permissions = [
    'create content translations',
    'delete content translations',
    'update content translations',
    'translate any entity',
  ];

  $permissions['sitemanager'] = $translation_permissions;
  $permissions['contentmanager'] = $translation_permissions;

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
  return [];
}

/**
 * Set field config for images.
 *
 * @see content_translation_form_language_content_settings_submit()
 */
function _social_language_set_image_configuration_third_party_settings() {
  $column_settings = [
    'file' => 'file',
    'alt' => '0',
    'title' => '0',
  ];

  $field_config_images = [];
  $field_config_images[] = FieldConfig::loadByName('node', 'book', 'field_book_image');
  $field_config_images[] = FieldConfig::loadByName('node', 'event', 'field_event_image');
  $field_config_images[] = FieldConfig::loadByName('node', 'page', 'field_page_image');

  // $field_config_images[] = FieldConfig::loadByName('block_content', 'block_content', 'field_hero_image');
  // TODO: enable these for all the fields. Test that it loads with drush ev. e.g.:
  // drush ev "var_dump(\Drupal\field\Entity\FieldConfig::loadByName('node', 'event', 'field_event_image'));";
  // Check all images in the content translation UI of in the PR.

  foreach ($field_config_images as $field_config) {
    if ($field_config->isTranslatable()) {
      $field_config->setThirdPartySetting('content_translation', 'translation_sync', $column_settings);
      $field_config->save();
    }
  }
}

/**
 * Enable topic type and profile tag taxonomy translation.
 */
function social_language_update_8001() {
  // Install the configuration added as part of this update.
  $profile_tag_yml = <<<YAML
langcode: en
status: true
dependencies:
  config:
    - taxonomy.vocabulary.profile_tag
  module:
    - content_translation
third_party_settings:
  content_translation:
    enabled: true
id: taxonomy_term.profile_tag
target_entity_type_id: taxonomy_term
target_bundle: profile_tag
default_langcode: site_default
language_alterable: true
YAML;

  $topic_types_yml = <<<YAML
langcode: en
status: true
dependencies:
  config:
    - taxonomy.vocabulary.topic_types
  module:
    - content_translation
third_party_settings:
  content_translation:
    enabled: true
id: taxonomy_term.topic_types
target_entity_type_id: taxonomy_term
target_bundle: topic_types
default_langcode: site_default
language_alterable: true
YAML;

  $new_config = [
    'language.content_settings.taxonomy_term.profile_tag' => $profile_tag_yml,
    'language.content_settings.taxonomy_term.topic_types' => $topic_types_yml,
  ];

  $config_factory = \Drupal::configFactory();

  foreach ($new_config as $name => $yml) {
    $data = Yaml::decode($yml);
    $config_factory->getEditable($name)->setData($data)->save(TRUE);
  }

  // Grant the new permissions for the sitemanager.
  user_role_grant_permissions('sitemanager', [
    'translate profile_tag taxonomy_term',
    'translate topic_types taxonomy_term',
  ]);
}

/**
 * Give translate permissions to content managers.
 */
function social_language_update_8002() {
  // Check if the permissions for site managers have been restricted.
  if ($role = Role::load('sitemanager')) {
    if ($role->hasPermission('create content translations')) {
      $permissions = _social_language_get_permissions('contentmanager');
      user_role_grant_permissions('contentmanager', $permissions);
      user_role_grant_permissions('sitemanager', ['translate any entity']);
    }
  }
}

/**
 * Set field config for images.
 *
 * @see content_translation_form_language_content_settings_submit()
 */
function social_language_update_8003() {
  _social_language_set_image_configuration_third_party_settings();
}
